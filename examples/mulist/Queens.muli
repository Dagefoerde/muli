package mulist;

import java.util.stream.Stream;
import de.wwu.muli.*;
import de.wwu.muli.solution.*;

public class Queens {
  private int n;

  public static void main(String[] args) {
    System.out.println("Program started.");
    for (int i = 0; i<65; i++) {
      final long start = System.nanoTime();
      new Queens(4);
      final long timeEnd = System.nanoTime();
      System.out.println("" + (timeEnd - start));
    }
  }

  public Queens(int n) {
    this.n = n;

    Stream<Solution<Object>> solutions = Muli.muli(() -> {
      int[] qs = new int[n];

      for (int i = 0; i < n; i++) {
        qs[i] = freeVar(1, n);
      }

      allSafe(qs);

      return qs;
    }, SearchStrategy.DepthFirstSearch);

    Integer[] result = (Integer[]) solutions.findFirst().get().value;

    for(int i = 0; i < n; i++)
      System.out.println(result[i]);
  }

  private void allSafe(int[] qs) {
    for (int i = 0; i < n; i++) {
      safe(i, i + 1, qs, 1);
    }
  }

  private void safe(int i, int j, int[] qs, int d) {
    if (j != n) {
      noAttack(qs[i], qs[j], d);
      safe(i, j + 1, qs, d+1);
    }
  }

  private void noAttack(int q, int q1, int d) {
    if (q == q1 || q == q1 + d || q == q1 - d)
      throw Muli.fail();
  }

  public static int freeVar(int lower, int upper) {
    int i free;

    if (i < lower ||  i > upper)
      throw Muli.fail();

    return i;
  }
}
