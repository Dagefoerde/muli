package mulist;
import java.util.stream.Stream;
import de.wwu.muli.*;
import de.wwu.muli.solution.*;

public class WaterJug {
	final int a = 4; // Capacity of the first jug.
    final int b = 3; // Capacity of the second jug.
    final int t = 2; // Target capacity has to be a multiple of gcd(a, b).

	public static void main(String[] args) {
		System.out.println("Program started.");
		new WaterJug();

	}

	public WaterJug() {
		Stream<Solution<Object>> solutions = Muli.muli(() -> {
		    int[] jugs = {0, 0};

		    return step(jugs);
		}, SearchStrategy.IterativeDeepening);
		//}, SearchStrategy.BreadthFirstSearch);
		//}, SearchStrategy.DepthFirstSearch);

		// Before executing the following: Ensure that de.wwu.muli.env.nativeimpl.SolutionIterator#abortEarly is true! Then watch the output.
		solutions.count();
	}

	public boolean step(int[] jugs) {
		// Return if target capacity is reached in one of the jugs.
		if (jugs[0] == t || jugs[1] == t)
			return true;

		// Non-determinstic choice.
		int choice free;

		if (choice == 0) {
			// Fill the first jug if it is not already full.
			if (jugs[0] < a) {
				jugs[0] = a;

				return step(jugs);
			}
		} else if (choice == 1) {
			// Fill the second jug if it is not already full.
			if (jugs[1] < b) {
				jugs[1] = b;

				return step(jugs);
			}
		} else if (choice == 2) {
			// Empty the first jug.
			if (jugs[0] > 0) {
				jugs[0] = 0;

				return step(jugs);
			}
		} else if (choice == 3) {
			// Empty the second jug.
			if (jugs[1] > 0) {
				jugs[1] = 0;

				return step(jugs);
			}
		} else if (choice == 4) {
			// Pour from second jug into first jug until the first jug is full or the second jug is empty.
			if (jugs[1] > 0) {
				int x = Math.min(jugs[0] + jugs[1], a);

				jugs[1] = Math.max(0, jugs[0] + jugs[1] - a);
				jugs[0] = x;

				return step(jugs);
			}
		} else {
			// Pour from second jug into first jug until the first jug is full or the second jug is empty.
			if (jugs[0] > 0) {
				int x = Math.max(0, jugs[0] + jugs[1] - b);

				jugs[1] = Math.min(jugs[0] + jugs[1], b);
				jugs[0] = x;

				return step(jugs);
			}
		}

		throw Muli.fail();
	}
}
