public class Partition3 {
	int n = 9;     // number of input values
	int m = n/3;   // number of triples taken from input values
	int[] a;       // random input of length n
	int sum = 0;   // sum of all inputs
	int[] mapping; // mapping of inputs to triples

	public Partition3(){
		a = toN(n); // generate some input
		for(int k: a) sum += k; 

		// map each input element to a triple	
		Stream<Solution<Integer[]>> solution = Muli.search(() -> {
			mapping = generateMapping(n);
			checkMapping();
			return mapping;
		}).limit(1);

		// print the results
		Integer[] result = solution.findFirst().get().value;
		for(int i=0; i<n; i++)
			System.out.println(a[i]+" assigned to triple "+result[i]); }

	public static int[] toN(int n){
		int[] a = new int[n];
		for(int i=0; i<n; i++) a[i] = i;
		return a; }
	
	public int[] generateMapping(int n){
		int[] mapping = new int[n];
		for(int i=0; i<n; i++) { 
			int triple free;
			if (triple <= 0 || triple > m)
				throw Muli.fail();
			else mapping[i] = triple; }
		return mapping; }
	
	public void checkMapping() {
		for(int j=1; j<=m; j++) {
			int sum3 = 0;
			int occurrences = 0;
			for(int i=0; i<n; i++)
				if(mapping[i] == j) {
					occurrences++;
					sum3 += a[i]; }
			if (occurrences != 3 || sum3 != sum/m) throw Muli.fail();		
		} } }