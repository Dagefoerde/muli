public class GraphColoring {
	private class Edge {
		int start; int end;	
		public Edge(int s, int e) { start = s; end = e; }
	}
	int n = 9;    // number of nodes
	int c = 9;    // number of colors
	int[] colors; // colors of nodes
	ArrayList<Edge> edges = new ArrayList<Edge>();

	public GraphColoring(){
		colors = new int[n];
		generateGraph(); // generate some graph

		// search coloring
		Stream<Solution<int[]>> solution = Muli.search(() -> {
				generateColoring();
				checkColoring();
				return colors;
			}).limit(1);

		// print the results
		int[] result = solution.findFirst().get().value;
		for(int i=0; i<n; i++)
			System.out.println("color of node "+i+" is "+result[i]); }

	public void generateGraph(){
		for(int i=0; i<n; i++)
			for(int j=0; j<n; j++)
				if (i != j)
					edges.add(new Edge(i,j)); }
	
	public void generateColoring(){
		for(int i=0; i<n; i++) { 
			int color free;
			if (!(color > 0 && color <= c))
				throw Muli.fail();
			else colors[i] = color; } }
	
	public void checkColoring(){
	for(Edge e: edges) {
		if (colors[e.start] == colors[e.end])
			throw Muli.fail(); } } }